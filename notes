fOR LOOPS

example

for (int i = 0; i < 3; i++)

// int i = 0 initalizes the varible i to equal 0
// next is the condition which will be checked every cycle thru the loop
// i++ is what the program will do after each loop. which will add 1 to the variable i in each loop until it meets the condition of i < 3.
// i = 0, is i < 3, if so print "meow" then a new line then reapet in each loop until i < 3 then the loop will stop.
{
	printf("meow\n");
}
-------------------------------------------------------------------------------

for loops and while loops can be used for the same thing with subtle differences.

example of same code above but with while loop

int i = 0;
while (i < 3);
{
	print("meow\n");
	i++;
}
-------------------------------------------------------------------------------

Malloc() and Free() functions

Using the mallc() and free() functions allows a prgorammer to request a certain amount of memory be allocated dynamically, us the memory and the return the memory to the C runtime library for later reuse.

HEAP
The term "heap" refers to memory that C manages on our behalf when we need to "borrow" a bit of memory and give it back later. There are a coupe of issues with a simple heap implementation. First if we forget to call free() when we are done with the memory, we have created a memory leak and our program eventually will run out of memory and abort. C places the onus of giving back any dynamically allocated memory on the programmer.

After a series of calls to malloc() and free() the heap space becomes fragmented and some cleanup in needed. This clean up is call garbage collection.









































